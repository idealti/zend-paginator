{
    "docs": [
        {
            "location": "/",
            "text": "../../README.md",
            "title": "Home"
        },
        {
            "location": "/intro/",
            "text": "Introduction\n\n\nzend-paginator is a flexible component for paginating collections of data and\npresenting that data to users.\n\n\nThe primary design goals of zend-paginator are as follows:\n\n\n\n\nPaginate arbitrary data, not just relational databases.\n\n\nFetch only the results that need to be displayed.\n\n\nDo not force users to adhere to only one way of displaying data or rendering\n  pagination controls.\n\n\nLoosely couple to other Zend Framework components so that users who wish to\n  use it independently of zend-view, zend-Db`, etc. can do so.",
            "title": "Intro"
        },
        {
            "location": "/intro/#introduction",
            "text": "zend-paginator is a flexible component for paginating collections of data and\npresenting that data to users.  The primary design goals of zend-paginator are as follows:   Paginate arbitrary data, not just relational databases.  Fetch only the results that need to be displayed.  Do not force users to adhere to only one way of displaying data or rendering\n  pagination controls.  Loosely couple to other Zend Framework components so that users who wish to\n  use it independently of zend-view, zend-Db`, etc. can do so.",
            "title": "Introduction"
        },
        {
            "location": "/usage/",
            "text": "Usage\n\n\nPaginating data collections\n\n\nIn order to paginate items into pages, \nZend\\Paginator\n must have a generic way\nof accessing that data. For that reason, all data access takes place through\ndata source adapters. Several adapters ship with zend-paginator by default:\n\n\n\n\n\n\n\n\nAdapter\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nArrayAdapter\n\n\nAccepts a PHP array.\n\n\n\n\n\n\nDbSelect\n\n\nAccepts a \nZend\\Db\\Sql\\Select\n instance, plus either a \nZend\\Db\\Adapter\\Adapter\n or \nZend\\Db\\Sql\\Sql\n instance; paginates rows from a database.\n\n\n\n\n\n\nIterator\n\n\nAccepts any \nIterator\n instance.\n\n\n\n\n\n\nNullFill\n\n\nDummy paginator.\n\n\n\n\n\n\n\n\n\n\nDatabase optimizations\n\n\nInstead of selecting every matching row of a given query, the \nDbSelect\n adapter\nretrieves only the smallest amount of data necessary for displaying the\ncurrent page. Because of this, a second query is dynamically generated to\ndetermine the total number of matching rows.\n\n\n\n\nTo create a paginator instance, you must supply an adapter to the constructor:\n\n\nuse Zend\\Paginator\\Adapter;\nuse Zend\\Paginator\\Paginator;\n\n$paginator = new Paginator(new Adapter\\ArrayAdapter($array));\n\n\n\nIn the case of the \nNullFill\n adapter, in lieu of a data collection you must\nsupply an item count to its constructor.\n\n\nAlthough the instance is technically usable in this state, in your controller\naction you'll need to tell the paginator what page number the user requested.\nThis allows advancing through the paginated data.\n\n\n$paginator->setCurrentPageNumber($page);\n\n\n\nThe simplest way to keep track of this value is through a URL parameter. The\nfollowing is an example \nzend-router\n\nroute configuration:\n\n\nreturn [\n    'routes' => [\n        'paginator' => [\n            'type' => 'segment',\n            'options' => [\n                'route' => '/list/[page/:page]',\n                'defaults' => [\n                    'page' => 1,\n                ],\n            ],\n        ],\n    ],\n];\n\n\n\nWith the above route (and using \nzend-mvc\n\ncontrollers), you might set the current page number in your controller action\nlike so:\n\n\n$paginator->setCurrentPageNumber($this->params()->fromRoute('page'));\n\n\n\nThere are other options available; see the \nConfiguration chapter\n\nfor more on them.\n\n\nFinally, you'll need to assign the paginator instance to your view. If you're\nusing zend-mvc and zend-view, you can assign the paginator object to your view\nmodel:\n\n\n$vm = new ViewModel();\n$vm->setVariable('paginator', $paginator);\nreturn $vm;\n\n\n\nThe DbSelect adapter\n\n\nMost adapters receive their datasets directly. However, the \nDbSelect\n adapter\nrequires a more detailed explanation regarding the retrieval and count of the\ndata from the database.\n\n\nYou do not have to retrieve data from the database prior to using the \nDbSelect\n\nadapter; the adapter will do the retrieval for you, as well as provide a count\nof total pages. If additional work has to be done on the database results which\ncannot be expressed via the provided \nZend\\Db\\Sql\\Select\n, object you must\nextend the adapter and override the \ngetItems()\n method.\n\n\nAdditionally this adapter does \nnot\n fetch all records from the database in\norder to count them.  Instead, the adapter manipulates the original query to\nproduce a corresponding \nCOUNT\n query, and uses the new query to get the number\nof rows.  While this approach requires an extra round-trip to the database,\ndoing so is stillmany times faster than fetching an entire result set and using\n\ncount()\n, especially with large collections of data.\n\n\nThe database adapter will try and build the most efficient query that will\nexecute on pretty much any modern database. However, depending on your database\nor even your own schema setup, there might be more efficient ways to get a\nrowcount.\n\n\nThere are two approaches for doing this. The first is to extend the \nDbSelect\n\nadapter and override the \ncount()\n method:\n\n\nclass MyDbSelect extends DbSelect\n{\n    public function count()\n    {\n        if ($this->rowCount) {\n            return $this->rowCount;\n        }\n\n        $select = new Select();\n        $select\n          ->from('item_counts')\n          ->columns(['c'=>'post_count']);\n\n        $statement = $this->sql->prepareStatementForSqlObject($select);\n        $result    = $statement->execute();\n        $row       = $result->current();\n        $this->rowCount = $row['c'];\n\n        return $this->rowCount;\n    }\n}\n\n$adapter = new MyDbSelect($query, $adapter);\n\n\n\nAlternately, you can pass an additional \nZend\\Db\\Sql\\Select\n object as the\nfourth constructor argument to the \nDbSelect\n adapter to implement a custom\ncount query.\n\n\nFor example, if you keep track of the count of blog posts in a separate table,\nyou could achieve a faster count query with the following setup:\n\n\nuse Zend\\Db\\Sql\\Select;\nuse Zend\\Paginator\\Adapter\\DbSelect;\nuse Zend\\Paginator\\Paginator;\n\n$countQuery = new Select();\n$countQuery\n    ->from('item_counts')\n    ->columns([ DbSelect::ROW_COUNT_COLUMN_NAME => 'post_count' ]);\n\n$adapter = new DbSelect($query, $dbAdapter, null, $countQuery);\n$paginator = new Paginator($adapter);\n\n\n\nAlternatively, the same can be achieved using the provided factory:\n\n\nuse Zend\\Paginator\\Adapter\\DbSelect;\nuse Zend\\Paginator\\Factory as PaginatorFactory;\n\n$countQuery = new Select();\n$countQuery\n    ->from('item_counts')\n    ->columns([ DbSelect::ROW_COUNT_COLUMN_NAME => 'post_count' ]);\n\n$paginator = PaginatorFactory::factory(\n    [\n        $query,\n        $dbAdapter,\n        null,\n        $countQuery,\n    ],\n    DbSelect::class\n);\n\n\n\nThis approach will probably not give you a huge performance gain on small\ncollections and/or simple select queries. However, with complex queries and\nlarge collections, a similar approach could give you a significant performance\nboost.\n\n\nThe \nDbSelect\n adapter also supports returning of fetched records using the\n\nResultSet subcomponent of zend-db\n.\nYou can override the concrete \nResultSet\n implementation by passing an object\nimplementing \nZend\\Db\\ResultSet\\ResultSetInterface\n as the third constructor\nargument to the \nDbSelect\n adapter:\n\n\nuse Zend\\Db\\ResultSet\\HydratingResultSet;\nuse Zend\\Paginator\\Adapter\\DbSelect;\nuse Zend\\Paginator\\Paginator;\n\n// $objectPrototype is an instance of our custom entity\n// $hydrator is a custom hydrator for our entity\n// (implementing Zend\\Hydrator\\HydratorInterface)\n$resultSet = new HydratingResultSet($hydrator, $objectPrototype);\n\n$adapter = new DbSelect($query, $dbAdapter, $resultSet)\n$paginator = new Zend\\Paginator\\Paginator($adapter);\n\n\n\nNow when we iterate over \n$paginator\n we will get instances of our custom entity\ninstead of associative arrays.\n\n\nRendering pages with view scripts\n\n\nThe view script is used to render the page items (if you're using\nzend-paginator to do so) and display the pagination control.\n\n\nBecause \nZend\\Paginator\\Paginator\n implements the SPL interface\n\nIteratorAggregate\n, you can loop over an\ninstance using \nforeach\n:\n\n\n<html>\n<body>\n<h1>Example</h1>\n<?php if (count($this->paginator)): ?>\n<ul>\n<?php foreach ($this->paginator as $item): ?>\n  <li><?= $item; ?></li>\n<?php endforeach; ?>\n</ul>\n<?php endif; ?>\n\n<?= $this->paginationControl(\n    $this->paginator,\n    'Sliding',\n    'my_pagination_control',\n    ['route' => 'application/paginator']\n) ?>\n</body>\n</html>\n\n\n\nNotice the view helper call near the end. \nPaginationControl\n accepts up to four\nparameters: the paginator instance, a scrolling style, a view script name, and\nan array of additional parameters.\n\n\nThe second and third parameters are very important. Whereas the view script name\nis used to determine how the pagination control should \nlook\n, the scrolling\nstyle is used to control how it should \nbehave\n. Say the view script is in the\nstyle of a search pagination control, like the one below:\n\n\n\n\nWhat happens when the user clicks the \"next\" link a few times? Well, any number of things could\nhappen:\n\n\n\n\nThe current page number could stay in the middle as you click through (as it\n  does on Yahoo!)\n\n\nIt could advance to the end of the page range and then appear again on the\n  left when the user clicks \"next\" one more time. \n\n\nThe page numbers might even expand and contract as the user advances (or\n  \"scrolls\") through them (as they do on Google).\n\n\n\n\nThere are four scrolling styles packaged with Zend Framework:\n\n\n\n\n\n\n\n\nScrolling style\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nAll\n\n\nReturns every page. This is useful for dropdown menu pagination controls with relatively few pages. In these cases, you want all pages available to the user at once.\n\n\n\n\n\n\nElastic\n\n\nA Google-like scrolling style that expands and contracts as a user scrolls through the pages.\n\n\n\n\n\n\nJumping\n\n\nAs users scroll through, the page number advances to the end of a given range, then starts again at the beginning of the new range.\n\n\n\n\n\n\nSliding\n\n\nA Yahoo!-like scrolling style that positions the current page number in the center of the page range, or as close as possible. This is the default style.\n\n\n\n\n\n\n\n\nThe fourth and final parameter is reserved for an optional associative array of\nvariables that you want available in your view (available via \n$this\n). For\ninstance, these values could include extra URL parameters for pagination links.\n\n\nBy setting the default view script name, default scrolling style, and view\ninstance, you can eliminate the calls to \nPaginationControl\n completely:\n\n\nuse Zend\\Paginator\\Paginator;\nuse Zend\\View\\Helper\\PaginationControl;\n\nPaginator::setDefaultScrollingStyle('Sliding');\nPaginationControl::setDefaultViewPartial('my_pagination_control');\n\n\n\nWhen all of these values are set, you can render the pagination control inside\nyour view script by echoing the paginator instance:\n\n\n<?= $this->paginator ?>\n\n\n\n\n\nUsing other template engines\n\n\nOf course, it's possible to use zend-paginator with other template engines.\nFor example, with Smarty you might do the following:\n\n\n$smarty-assign('pages', $paginator->getPages());\n\n\n\nYou could then access paginator values from a template like so:\n\n\n{$pages.pageCount}\n\n\n\n\n\nExample pagination controls\n\n\nThe following example pagination controls will help you get started with\nzend-view:\n\n\nSearch pagination:\n\n\n<!--\nSee http://developer.yahoo.com/ypatterns/pattern.php?pattern=searchpagination\n-->\n\n<?php if ($this->pageCount): ?>\n<div class=\"paginationControl\">\n<!-- Previous page link -->\n<?php if (isset($this->previous)): ?>\n  <a href=\"<?= $this->url($this->route, ['page' => $this->previous]); ?>\">\n    &lt; Previous\n  </a> |\n<?php else: ?>\n  <span class=\"disabled\">&lt; Previous</span> |\n<?php endif; ?>\n\n<!-- Numbered page links -->\n<?php foreach ($this->pagesInRange as $page): ?>\n  <?php if ($page != $this->current): ?>\n    <a href=\"<?= $this->url($this->route, ['page' => $page]); ?>\">\n        <?= $page; ?>\n    </a> |\n  <?php else: ?>\n    <?= $page; ?> |\n  <?php endif; ?>\n<?php endforeach; ?>\n\n<!-- Next page link -->\n<?php if (isset($this->next)): ?>\n  <a href=\"<?= $this->url($this->route, ['page' => $this->next]); ?>\">\n    Next &gt;\n  </a>\n<?php else: ?>\n  <span class=\"disabled\">Next &gt;</span>\n<?php endif; ?>\n</div>\n<?php endif; ?>\n\n\n\nItem pagination:\n\n\n<!--\nSee http://developer.yahoo.com/ypatterns/pattern.php?pattern=itempagination\n-->\n\n<?php if ($this->pageCount): ?>\n<div class=\"paginationControl\">\n<?= $this->firstItemNumber; ?> - <?= $this->lastItemNumber; ?>\nof <?= $this->totalItemCount; ?>\n\n<!-- First page link -->\n<?php if (isset($this->previous)): ?>\n  <a href=\"<?= $this->url($this->route, ['page' => $this->first]); ?>\">\n    First\n  </a> |\n<?php else: ?>\n  <span class=\"disabled\">First</span> |\n<?php endif; ?>\n\n<!-- Previous page link -->\n<?php if (isset($this->previous)): ?>\n  <a href=\"<?= $this->url($this->route, ['page' => $this->previous]); ?>\">\n    &lt; Previous\n  </a> |\n<?php else: ?>\n  <span class=\"disabled\">&lt; Previous</span> |\n<?php endif; ?>\n\n<!-- Next page link -->\n<?php if (isset($this->next)): ?>\n  <a href=\"<?= $this->url($this->route, ['page' => $this->next]); ?>\">\n    Next &gt;\n  </a> |\n<?php else: ?>\n  <span class=\"disabled\">Next &gt;</span> |\n<?php endif; ?>\n\n<!-- Last page link -->\n<?php if (isset($this->next)): ?>\n  <a href=\"<?= $this->url($this->route, ['page' => $this->last]); ?>\">\n    Last\n  </a>\n<?php else: ?>\n  <span class=\"disabled\">Last</span>\n<?php endif; ?>\n\n</div>\n<?php endif; ?>\n\n\n\nDropdown pagination:\n\n\n<?php if ($this->pageCount): ?>\n<select id=\"paginationControl\" size=\"1\">\n<?php foreach ($this->pagesInRange as $page): ?>\n  <?php $selected = ($page == $this->current) ? ' selected=\"selected\"' : ''; ?>\n  <option value=\"<?= $this->url($this->route, ['page' => $page]);?>\"<?= $selected ?>>\n    <?= $page; ?>\n  </option>\n<?php endforeach; ?>\n</select>\n<?php endif; ?>\n\n<script type=\"text/javascript\"\n     src=\"http://ajax.googleapis.com/ajax/libs/prototype/1.6.0.2/prototype.js\">\n</script>\n<script type=\"text/javascript\">\n$('paginationControl').observe('change', function() {\n    window.location = this.options[this.selectedIndex].value;\n})\n</script>\n\n\n\nListing of properties\n\n\nThe following options are available to pagination control view scripts:\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfirst\n\n\ninteger\n\n\nFirst page number (typically 1).\n\n\n\n\n\n\nfirstItemNumber\n\n\ninteger\n\n\nAbsolute number of the first item on this page.\n\n\n\n\n\n\nfirstPageInRange\n\n\ninteger\n\n\nFirst page in the range returned by the scrolling style.\n\n\n\n\n\n\ncurrent\n\n\ninteger\n\n\nCurrent page number.\n\n\n\n\n\n\ncurrentItemCount\n\n\ninteger\n\n\nNumber of items on this page.\n\n\n\n\n\n\nitemCountPerPage\n\n\ninteger\n\n\nMaximum number of items available to each page.\n\n\n\n\n\n\nlast\n\n\ninteger\n\n\nLast page number.\n\n\n\n\n\n\nlastItemNumber\n\n\ninteger\n\n\nAbsolute number of the last item on this page.\n\n\n\n\n\n\nlastPageInRange\n\n\ninteger\n\n\nLast page in the range returned by the scrolling style.\n\n\n\n\n\n\nnext\n\n\ninteger\n\n\nNext page number.\n\n\n\n\n\n\npageCount\n\n\ninteger\n\n\nNumber of pages.\n\n\n\n\n\n\npagesInRange\n\n\narray\n\n\nArray of pages returned by the scrolling style.\n\n\n\n\n\n\nprevious\n\n\ninteger\n\n\nPrevious page number.\n\n\n\n\n\n\ntotalItemCount\n\n\ninteger\n\n\nTotal number of items.",
            "title": "Usage"
        },
        {
            "location": "/usage/#usage",
            "text": "",
            "title": "Usage"
        },
        {
            "location": "/usage/#paginating-data-collections",
            "text": "In order to paginate items into pages,  Zend\\Paginator  must have a generic way\nof accessing that data. For that reason, all data access takes place through\ndata source adapters. Several adapters ship with zend-paginator by default:     Adapter  Description      ArrayAdapter  Accepts a PHP array.    DbSelect  Accepts a  Zend\\Db\\Sql\\Select  instance, plus either a  Zend\\Db\\Adapter\\Adapter  or  Zend\\Db\\Sql\\Sql  instance; paginates rows from a database.    Iterator  Accepts any  Iterator  instance.    NullFill  Dummy paginator.",
            "title": "Paginating data collections"
        },
        {
            "location": "/usage/#database-optimizations",
            "text": "Instead of selecting every matching row of a given query, the  DbSelect  adapter\nretrieves only the smallest amount of data necessary for displaying the\ncurrent page. Because of this, a second query is dynamically generated to\ndetermine the total number of matching rows.   To create a paginator instance, you must supply an adapter to the constructor:  use Zend\\Paginator\\Adapter;\nuse Zend\\Paginator\\Paginator;\n\n$paginator = new Paginator(new Adapter\\ArrayAdapter($array));  In the case of the  NullFill  adapter, in lieu of a data collection you must\nsupply an item count to its constructor.  Although the instance is technically usable in this state, in your controller\naction you'll need to tell the paginator what page number the user requested.\nThis allows advancing through the paginated data.  $paginator->setCurrentPageNumber($page);  The simplest way to keep track of this value is through a URL parameter. The\nfollowing is an example  zend-router \nroute configuration:  return [\n    'routes' => [\n        'paginator' => [\n            'type' => 'segment',\n            'options' => [\n                'route' => '/list/[page/:page]',\n                'defaults' => [\n                    'page' => 1,\n                ],\n            ],\n        ],\n    ],\n];  With the above route (and using  zend-mvc \ncontrollers), you might set the current page number in your controller action\nlike so:  $paginator->setCurrentPageNumber($this->params()->fromRoute('page'));  There are other options available; see the  Configuration chapter \nfor more on them.  Finally, you'll need to assign the paginator instance to your view. If you're\nusing zend-mvc and zend-view, you can assign the paginator object to your view\nmodel:  $vm = new ViewModel();\n$vm->setVariable('paginator', $paginator);\nreturn $vm;",
            "title": "Database optimizations"
        },
        {
            "location": "/usage/#the-dbselect-adapter",
            "text": "Most adapters receive their datasets directly. However, the  DbSelect  adapter\nrequires a more detailed explanation regarding the retrieval and count of the\ndata from the database.  You do not have to retrieve data from the database prior to using the  DbSelect \nadapter; the adapter will do the retrieval for you, as well as provide a count\nof total pages. If additional work has to be done on the database results which\ncannot be expressed via the provided  Zend\\Db\\Sql\\Select , object you must\nextend the adapter and override the  getItems()  method.  Additionally this adapter does  not  fetch all records from the database in\norder to count them.  Instead, the adapter manipulates the original query to\nproduce a corresponding  COUNT  query, and uses the new query to get the number\nof rows.  While this approach requires an extra round-trip to the database,\ndoing so is stillmany times faster than fetching an entire result set and using count() , especially with large collections of data.  The database adapter will try and build the most efficient query that will\nexecute on pretty much any modern database. However, depending on your database\nor even your own schema setup, there might be more efficient ways to get a\nrowcount.  There are two approaches for doing this. The first is to extend the  DbSelect \nadapter and override the  count()  method:  class MyDbSelect extends DbSelect\n{\n    public function count()\n    {\n        if ($this->rowCount) {\n            return $this->rowCount;\n        }\n\n        $select = new Select();\n        $select\n          ->from('item_counts')\n          ->columns(['c'=>'post_count']);\n\n        $statement = $this->sql->prepareStatementForSqlObject($select);\n        $result    = $statement->execute();\n        $row       = $result->current();\n        $this->rowCount = $row['c'];\n\n        return $this->rowCount;\n    }\n}\n\n$adapter = new MyDbSelect($query, $adapter);  Alternately, you can pass an additional  Zend\\Db\\Sql\\Select  object as the\nfourth constructor argument to the  DbSelect  adapter to implement a custom\ncount query.  For example, if you keep track of the count of blog posts in a separate table,\nyou could achieve a faster count query with the following setup:  use Zend\\Db\\Sql\\Select;\nuse Zend\\Paginator\\Adapter\\DbSelect;\nuse Zend\\Paginator\\Paginator;\n\n$countQuery = new Select();\n$countQuery\n    ->from('item_counts')\n    ->columns([ DbSelect::ROW_COUNT_COLUMN_NAME => 'post_count' ]);\n\n$adapter = new DbSelect($query, $dbAdapter, null, $countQuery);\n$paginator = new Paginator($adapter);  Alternatively, the same can be achieved using the provided factory:  use Zend\\Paginator\\Adapter\\DbSelect;\nuse Zend\\Paginator\\Factory as PaginatorFactory;\n\n$countQuery = new Select();\n$countQuery\n    ->from('item_counts')\n    ->columns([ DbSelect::ROW_COUNT_COLUMN_NAME => 'post_count' ]);\n\n$paginator = PaginatorFactory::factory(\n    [\n        $query,\n        $dbAdapter,\n        null,\n        $countQuery,\n    ],\n    DbSelect::class\n);  This approach will probably not give you a huge performance gain on small\ncollections and/or simple select queries. However, with complex queries and\nlarge collections, a similar approach could give you a significant performance\nboost.  The  DbSelect  adapter also supports returning of fetched records using the ResultSet subcomponent of zend-db .\nYou can override the concrete  ResultSet  implementation by passing an object\nimplementing  Zend\\Db\\ResultSet\\ResultSetInterface  as the third constructor\nargument to the  DbSelect  adapter:  use Zend\\Db\\ResultSet\\HydratingResultSet;\nuse Zend\\Paginator\\Adapter\\DbSelect;\nuse Zend\\Paginator\\Paginator;\n\n// $objectPrototype is an instance of our custom entity\n// $hydrator is a custom hydrator for our entity\n// (implementing Zend\\Hydrator\\HydratorInterface)\n$resultSet = new HydratingResultSet($hydrator, $objectPrototype);\n\n$adapter = new DbSelect($query, $dbAdapter, $resultSet)\n$paginator = new Zend\\Paginator\\Paginator($adapter);  Now when we iterate over  $paginator  we will get instances of our custom entity\ninstead of associative arrays.",
            "title": "The DbSelect adapter"
        },
        {
            "location": "/usage/#rendering-pages-with-view-scripts",
            "text": "The view script is used to render the page items (if you're using\nzend-paginator to do so) and display the pagination control.  Because  Zend\\Paginator\\Paginator  implements the SPL interface IteratorAggregate , you can loop over an\ninstance using  foreach :  <html>\n<body>\n<h1>Example</h1>\n<?php if (count($this->paginator)): ?>\n<ul>\n<?php foreach ($this->paginator as $item): ?>\n  <li><?= $item; ?></li>\n<?php endforeach; ?>\n</ul>\n<?php endif; ?>\n\n<?= $this->paginationControl(\n    $this->paginator,\n    'Sliding',\n    'my_pagination_control',\n    ['route' => 'application/paginator']\n) ?>\n</body>\n</html>  Notice the view helper call near the end.  PaginationControl  accepts up to four\nparameters: the paginator instance, a scrolling style, a view script name, and\nan array of additional parameters.  The second and third parameters are very important. Whereas the view script name\nis used to determine how the pagination control should  look , the scrolling\nstyle is used to control how it should  behave . Say the view script is in the\nstyle of a search pagination control, like the one below:   What happens when the user clicks the \"next\" link a few times? Well, any number of things could\nhappen:   The current page number could stay in the middle as you click through (as it\n  does on Yahoo!)  It could advance to the end of the page range and then appear again on the\n  left when the user clicks \"next\" one more time.   The page numbers might even expand and contract as the user advances (or\n  \"scrolls\") through them (as they do on Google).   There are four scrolling styles packaged with Zend Framework:     Scrolling style  Description      All  Returns every page. This is useful for dropdown menu pagination controls with relatively few pages. In these cases, you want all pages available to the user at once.    Elastic  A Google-like scrolling style that expands and contracts as a user scrolls through the pages.    Jumping  As users scroll through, the page number advances to the end of a given range, then starts again at the beginning of the new range.    Sliding  A Yahoo!-like scrolling style that positions the current page number in the center of the page range, or as close as possible. This is the default style.     The fourth and final parameter is reserved for an optional associative array of\nvariables that you want available in your view (available via  $this ). For\ninstance, these values could include extra URL parameters for pagination links.  By setting the default view script name, default scrolling style, and view\ninstance, you can eliminate the calls to  PaginationControl  completely:  use Zend\\Paginator\\Paginator;\nuse Zend\\View\\Helper\\PaginationControl;\n\nPaginator::setDefaultScrollingStyle('Sliding');\nPaginationControl::setDefaultViewPartial('my_pagination_control');  When all of these values are set, you can render the pagination control inside\nyour view script by echoing the paginator instance:  <?= $this->paginator ?>",
            "title": "Rendering pages with view scripts"
        },
        {
            "location": "/usage/#using-other-template-engines",
            "text": "Of course, it's possible to use zend-paginator with other template engines.\nFor example, with Smarty you might do the following:  $smarty-assign('pages', $paginator->getPages());  You could then access paginator values from a template like so:  {$pages.pageCount}",
            "title": "Using other template engines"
        },
        {
            "location": "/usage/#example-pagination-controls",
            "text": "The following example pagination controls will help you get started with\nzend-view:  Search pagination:  <!--\nSee http://developer.yahoo.com/ypatterns/pattern.php?pattern=searchpagination\n-->\n\n<?php if ($this->pageCount): ?>\n<div class=\"paginationControl\">\n<!-- Previous page link -->\n<?php if (isset($this->previous)): ?>\n  <a href=\"<?= $this->url($this->route, ['page' => $this->previous]); ?>\">\n    &lt; Previous\n  </a> |\n<?php else: ?>\n  <span class=\"disabled\">&lt; Previous</span> |\n<?php endif; ?>\n\n<!-- Numbered page links -->\n<?php foreach ($this->pagesInRange as $page): ?>\n  <?php if ($page != $this->current): ?>\n    <a href=\"<?= $this->url($this->route, ['page' => $page]); ?>\">\n        <?= $page; ?>\n    </a> |\n  <?php else: ?>\n    <?= $page; ?> |\n  <?php endif; ?>\n<?php endforeach; ?>\n\n<!-- Next page link -->\n<?php if (isset($this->next)): ?>\n  <a href=\"<?= $this->url($this->route, ['page' => $this->next]); ?>\">\n    Next &gt;\n  </a>\n<?php else: ?>\n  <span class=\"disabled\">Next &gt;</span>\n<?php endif; ?>\n</div>\n<?php endif; ?>  Item pagination:  <!--\nSee http://developer.yahoo.com/ypatterns/pattern.php?pattern=itempagination\n-->\n\n<?php if ($this->pageCount): ?>\n<div class=\"paginationControl\">\n<?= $this->firstItemNumber; ?> - <?= $this->lastItemNumber; ?>\nof <?= $this->totalItemCount; ?>\n\n<!-- First page link -->\n<?php if (isset($this->previous)): ?>\n  <a href=\"<?= $this->url($this->route, ['page' => $this->first]); ?>\">\n    First\n  </a> |\n<?php else: ?>\n  <span class=\"disabled\">First</span> |\n<?php endif; ?>\n\n<!-- Previous page link -->\n<?php if (isset($this->previous)): ?>\n  <a href=\"<?= $this->url($this->route, ['page' => $this->previous]); ?>\">\n    &lt; Previous\n  </a> |\n<?php else: ?>\n  <span class=\"disabled\">&lt; Previous</span> |\n<?php endif; ?>\n\n<!-- Next page link -->\n<?php if (isset($this->next)): ?>\n  <a href=\"<?= $this->url($this->route, ['page' => $this->next]); ?>\">\n    Next &gt;\n  </a> |\n<?php else: ?>\n  <span class=\"disabled\">Next &gt;</span> |\n<?php endif; ?>\n\n<!-- Last page link -->\n<?php if (isset($this->next)): ?>\n  <a href=\"<?= $this->url($this->route, ['page' => $this->last]); ?>\">\n    Last\n  </a>\n<?php else: ?>\n  <span class=\"disabled\">Last</span>\n<?php endif; ?>\n\n</div>\n<?php endif; ?>  Dropdown pagination:  <?php if ($this->pageCount): ?>\n<select id=\"paginationControl\" size=\"1\">\n<?php foreach ($this->pagesInRange as $page): ?>\n  <?php $selected = ($page == $this->current) ? ' selected=\"selected\"' : ''; ?>\n  <option value=\"<?= $this->url($this->route, ['page' => $page]);?>\"<?= $selected ?>>\n    <?= $page; ?>\n  </option>\n<?php endforeach; ?>\n</select>\n<?php endif; ?>\n\n<script type=\"text/javascript\"\n     src=\"http://ajax.googleapis.com/ajax/libs/prototype/1.6.0.2/prototype.js\">\n</script>\n<script type=\"text/javascript\">\n$('paginationControl').observe('change', function() {\n    window.location = this.options[this.selectedIndex].value;\n})\n</script>",
            "title": "Example pagination controls"
        },
        {
            "location": "/usage/#listing-of-properties",
            "text": "The following options are available to pagination control view scripts:     Property  Type  Description      first  integer  First page number (typically 1).    firstItemNumber  integer  Absolute number of the first item on this page.    firstPageInRange  integer  First page in the range returned by the scrolling style.    current  integer  Current page number.    currentItemCount  integer  Number of items on this page.    itemCountPerPage  integer  Maximum number of items available to each page.    last  integer  Last page number.    lastItemNumber  integer  Absolute number of the last item on this page.    lastPageInRange  integer  Last page in the range returned by the scrolling style.    next  integer  Next page number.    pageCount  integer  Number of pages.    pagesInRange  array  Array of pages returned by the scrolling style.    previous  integer  Previous page number.    totalItemCount  integer  Total number of items.",
            "title": "Listing of properties"
        },
        {
            "location": "/configuration/",
            "text": "Configuration\n\n\nZend\\Paginator\n has several configuration methods that can be called:\n\n\n\n\n\n\n\n\nMethod signature\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsetCurrentPageNumber(int $page) : void\n\n\nSets the current page number (default 1).\n\n\n\n\n\n\nsetItemCountPerPage(int $count) : void\n\n\nSets the maximum number of items to display on a page (default 10).\n\n\n\n\n\n\nsetPageRange(int $range) : void\n\n\nSets the number of items to display in the pagination control (default 10). Note: Most of the time this number will be adhered to exactly, but scrolling styles do have the option of only using it as a guideline or starting value (e.g., Elastic).\n\n\n\n\n\n\nsetView(Zend\\View\\Renderer\\RendererInterface $view) : void\n\n\nSets the view instance, for rendering convenience.",
            "title": "Configuration"
        },
        {
            "location": "/configuration/#configuration",
            "text": "Zend\\Paginator  has several configuration methods that can be called:     Method signature  Description      setCurrentPageNumber(int $page) : void  Sets the current page number (default 1).    setItemCountPerPage(int $count) : void  Sets the maximum number of items to display on a page (default 10).    setPageRange(int $range) : void  Sets the number of items to display in the pagination control (default 10). Note: Most of the time this number will be adhered to exactly, but scrolling styles do have the option of only using it as a guideline or starting value (e.g., Elastic).    setView(Zend\\View\\Renderer\\RendererInterface $view) : void  Sets the view instance, for rendering convenience.",
            "title": "Configuration"
        },
        {
            "location": "/advanced/",
            "text": "Advanced usage\n\n\nCustom data source adapters\n\n\nAt some point you may run across a data type that is not covered by the packaged\nadapters. In this case, you will need to write your own.\n\n\nTo do so, you must implement \nZend\\Paginator\\Adapter\\AdapterInterface\n. There\nare two methods required to do this:\n\n\n\n\ncount() : int\n\n\ngetItems(int $offset, int $itemCountPerPage) | array\n\n\n\n\nAdditionally, you'll typically implement a constructor that takes your data\nsource as a parameter.\n\n\nIf you've ever used the SPL interface \nCountable\n,\nyou're familiar with \ncount()\n. As used with zend-paginator, this is the total\nnumber of items in the data collection; \nZend\\Paginator\\Paginator::countAllItems\n\nproxies to this method.\n\n\nWhen retrieving items for the current page, \nZend\\Paginator\\Paginator\n calls on\nyour adapter's \ngetItems()\n method, providing it with an offset and the number\nof items to display per page; your job is to return the appropriate slice of\ndata. For an array, that would be:\n\n\nreturn array_slice($this->array, $offset, $itemCountPerPage);\n\n\n\nTake a look at the packaged adapters for ideas of how you might go about\nimplementing your own.\n\n\nCustom scrolling styles\n\n\nCreating your own scrolling style requires that you implement\n\nZend\\Paginator\\ScrollingStyle\\ScrollingStyleInterface\n, which defines a single\nmethod:\n\n\ngetPages(Paginator $paginator, int $pageRange = null) : array\n\n\n\nThis method should calculate a lower and upper bound for page numbers within the\nrange of so-called \"local\" pages (that is, pages that are nearby the current\npage).\n\n\nUnless it extends another scrolling style (see\n\nZend\\Paginator\\ScrollingStyle\\Elastic\n for an example), your custom scrolling\nstyle will inevitably end with something similar to the following line of code:\n\n\nreturn $paginator->getPagesInRange($lowerBound, $upperBound);\n\n\n\nThere's nothing special about this call; it's merely a convenience method to\ncheck the validity of the lower and upper bound and return an array with the range\nto the paginator.\n\n\nWhen you're ready to use your new scrolling style, you'll need to notif\n\nZend\\Paginator\\Paginator\n:\n\n\nuse My\\Paginator\\ScrollingStyle;\nuse Zend\\Paginator\\Paginator;\nuse Zend\\ServiceManager\\Factory\\InvokableFactory;\n\n$manager = Paginator::getScrollingStyleManager();\n$manager->setAlias('my-style', ScrollingStyle::class);\n$manager->setFactory(ScrollingStyle::class, InvokableFactory::class);\n\n\n\nCaching features\n\n\nZend\\Paginator\\Paginator\n can be told to cache the data it has already used,\npreventing the adapter from fetching on next request. To tell\npaginator to automatically cache the adapter's data, pass a pre-configured\n\nzend-cache adapter\n\nto the static \nsetCache()\n method:\n\n\nuse Zend\\Cache\\StorageFactory;\nuse Zend\\Paginator\\Paginator;\n\n$cache = StorageFactory::adapterFactory('filesystem', [\n    'cache_dir' => '/tmp',\n    'ttl'       => 3600,\n    'plugins'   => [ 'serializer' ],\n]);\nPaginator::setCache($cache);\n\n\n\nAs long as the \nPaginator\n class has been seeded with a cache storage object,\nthe data any instance generates will be cached. If you want to disable caching, call\n\nsetCacheEnabled()\n with a boolean \nfalse\n on a concrete instance:\n\n\nuse Zend\\Paginator\\Paginator;\n\n// $cache is a Zend\\Cache\\Storage\\StorageInterface instance\nPaginator::setCache($cache);\n\n// ... later on the script:\n$paginator->setCacheEnabled(false);\n// cache is now disabled for this instance.\n\n\n\nWhen a cache is set, data are automatically stored in it and pulled out from it.\nIt then can be useful to empty the cache manually. You can get this done by\ncalling \nclearPageItemCache($pageNumber)\n. If you don't pass any parameter, the\nwhole cache will be empty. You can optionally pass a parameter representing the\npage number to empty in the cache:\n\n\nuse Zend\\Paginator\\Paginator;\n\n// $cache is a Zend\\Cache\\Storage\\StorageInterface instance\nPaginator::setCache($cache);\n\n// $paginator is a fully configured Paginator instance:\n$items = $paginator->getCurrentItems();\n\n$page3Items = $paginator->getItemsByPage(3);\n// page 3 is now in cache\n\n// clear the cache of the results for page 3\n$paginator->clearPageItemCache(3);\n\n// clear all the cache data\n$paginator->clearPageItemCache();\n\n\n\nChanging the item count per page will empty the whole cache as it would have\nbecome invalid:\n\n\nuse Zend\\Paginator\\Paginator;\n\n// $cache is a Zend\\Cache\\Storage\\StorageInterface instance\nPaginator::setCache($cache);\n\n// Fetch some items from an instance:\n$items = $paginator->getCurrentItems();\n\n// Changing item count flushes the cache:\n$paginator->setItemCountPerPage(2);\n\n\n\nIt is also possible to see the data in cache and ask for it directly.\n\ngetPageItemCache()\n can be used for that:\n\n\nuse Zend\\Paginator\\Paginator;\n\n// $cache is a Zend\\Cache\\Storage\\StorageInterface instance\nPaginator::setCache($cache);\n\n// Set the item count:\n$paginator->setItemCountPerPage(3);\n\n// Fetch some items:\n$items = $paginator->getCurrentItems();\n$otherItems = $paginator->getItemsPerPage(4);\n\n// See the cached items as a two-dimensional array:\nvar_dump($paginator->getPageItemCache());",
            "title": "Advanced"
        },
        {
            "location": "/advanced/#advanced-usage",
            "text": "",
            "title": "Advanced usage"
        },
        {
            "location": "/advanced/#custom-data-source-adapters",
            "text": "At some point you may run across a data type that is not covered by the packaged\nadapters. In this case, you will need to write your own.  To do so, you must implement  Zend\\Paginator\\Adapter\\AdapterInterface . There\nare two methods required to do this:   count() : int  getItems(int $offset, int $itemCountPerPage) | array   Additionally, you'll typically implement a constructor that takes your data\nsource as a parameter.  If you've ever used the SPL interface  Countable ,\nyou're familiar with  count() . As used with zend-paginator, this is the total\nnumber of items in the data collection;  Zend\\Paginator\\Paginator::countAllItems \nproxies to this method.  When retrieving items for the current page,  Zend\\Paginator\\Paginator  calls on\nyour adapter's  getItems()  method, providing it with an offset and the number\nof items to display per page; your job is to return the appropriate slice of\ndata. For an array, that would be:  return array_slice($this->array, $offset, $itemCountPerPage);  Take a look at the packaged adapters for ideas of how you might go about\nimplementing your own.",
            "title": "Custom data source adapters"
        },
        {
            "location": "/advanced/#custom-scrolling-styles",
            "text": "Creating your own scrolling style requires that you implement Zend\\Paginator\\ScrollingStyle\\ScrollingStyleInterface , which defines a single\nmethod:  getPages(Paginator $paginator, int $pageRange = null) : array  This method should calculate a lower and upper bound for page numbers within the\nrange of so-called \"local\" pages (that is, pages that are nearby the current\npage).  Unless it extends another scrolling style (see Zend\\Paginator\\ScrollingStyle\\Elastic  for an example), your custom scrolling\nstyle will inevitably end with something similar to the following line of code:  return $paginator->getPagesInRange($lowerBound, $upperBound);  There's nothing special about this call; it's merely a convenience method to\ncheck the validity of the lower and upper bound and return an array with the range\nto the paginator.  When you're ready to use your new scrolling style, you'll need to notif Zend\\Paginator\\Paginator :  use My\\Paginator\\ScrollingStyle;\nuse Zend\\Paginator\\Paginator;\nuse Zend\\ServiceManager\\Factory\\InvokableFactory;\n\n$manager = Paginator::getScrollingStyleManager();\n$manager->setAlias('my-style', ScrollingStyle::class);\n$manager->setFactory(ScrollingStyle::class, InvokableFactory::class);",
            "title": "Custom scrolling styles"
        },
        {
            "location": "/advanced/#caching-features",
            "text": "Zend\\Paginator\\Paginator  can be told to cache the data it has already used,\npreventing the adapter from fetching on next request. To tell\npaginator to automatically cache the adapter's data, pass a pre-configured zend-cache adapter \nto the static  setCache()  method:  use Zend\\Cache\\StorageFactory;\nuse Zend\\Paginator\\Paginator;\n\n$cache = StorageFactory::adapterFactory('filesystem', [\n    'cache_dir' => '/tmp',\n    'ttl'       => 3600,\n    'plugins'   => [ 'serializer' ],\n]);\nPaginator::setCache($cache);  As long as the  Paginator  class has been seeded with a cache storage object,\nthe data any instance generates will be cached. If you want to disable caching, call setCacheEnabled()  with a boolean  false  on a concrete instance:  use Zend\\Paginator\\Paginator;\n\n// $cache is a Zend\\Cache\\Storage\\StorageInterface instance\nPaginator::setCache($cache);\n\n// ... later on the script:\n$paginator->setCacheEnabled(false);\n// cache is now disabled for this instance.  When a cache is set, data are automatically stored in it and pulled out from it.\nIt then can be useful to empty the cache manually. You can get this done by\ncalling  clearPageItemCache($pageNumber) . If you don't pass any parameter, the\nwhole cache will be empty. You can optionally pass a parameter representing the\npage number to empty in the cache:  use Zend\\Paginator\\Paginator;\n\n// $cache is a Zend\\Cache\\Storage\\StorageInterface instance\nPaginator::setCache($cache);\n\n// $paginator is a fully configured Paginator instance:\n$items = $paginator->getCurrentItems();\n\n$page3Items = $paginator->getItemsByPage(3);\n// page 3 is now in cache\n\n// clear the cache of the results for page 3\n$paginator->clearPageItemCache(3);\n\n// clear all the cache data\n$paginator->clearPageItemCache();  Changing the item count per page will empty the whole cache as it would have\nbecome invalid:  use Zend\\Paginator\\Paginator;\n\n// $cache is a Zend\\Cache\\Storage\\StorageInterface instance\nPaginator::setCache($cache);\n\n// Fetch some items from an instance:\n$items = $paginator->getCurrentItems();\n\n// Changing item count flushes the cache:\n$paginator->setItemCountPerPage(2);  It is also possible to see the data in cache and ask for it directly. getPageItemCache()  can be used for that:  use Zend\\Paginator\\Paginator;\n\n// $cache is a Zend\\Cache\\Storage\\StorageInterface instance\nPaginator::setCache($cache);\n\n// Set the item count:\n$paginator->setItemCountPerPage(3);\n\n// Fetch some items:\n$items = $paginator->getCurrentItems();\n$otherItems = $paginator->getItemsPerPage(4);\n\n// See the cached items as a two-dimensional array:\nvar_dump($paginator->getPageItemCache());",
            "title": "Caching features"
        }
    ]
}